// keyboards/sabine/config.h
#pragma once

/* Key matrix size */
#define MATRIX_ROWS 12  // 6 rows per side * 2 sides  
#define MATRIX_COLS 7   // 7 columns per side

/* Key matrix pins */
#define MATRIX_ROW_PINS { GP2, GP3, GP4, GP5, GP6, GP7 }
#define MATRIX_COL_PINS { GP10, GP19, GP20, GP18, GP26, GP27, GP28 }

/* Diode direction */
#define DIODE_DIRECTION COL2ROW

/* Split keyboard settings */
#define EE_HANDS  // Use EEPROM to determine left/right hand
#define SOFT_SERIAL_PIN GP1 // Communication between halves

/* Debounce reduces chatter (unintended double-presses) */
#define DEBOUNCE 5

/* Bootmagic key */
#define BOOTMAGIC_LITE_ROW 0
#define BOOTMAGIC_LITE_COLUMN 0

/* USB settings */
#define VENDOR_ID    0xFEED
#define PRODUCT_ID   0x5AB1  // SAB1 for Sabine
#define DEVICE_VER   0x0001
#define MANUFACTURER "YourName"
#define PRODUCT      "Sabine Split Keyboard"

---

// keyboards/sabine/sabine.h
#pragma once

#include "quantum.h"

#define LAYOUT( \
    L00, L01, L02, L03, L04, L05, L06,           R06, R05, R04, R03, R02, R01, R00, \
    L10, L11, L12, L13, L14, L15, L16,           R16, R15, R14, R13, R12, R11, R10, \
    L20, L21, L22, L23, L24, L25, L26,           R26, R25, R24, R23, R22, R21, R20, \
    L30, L31, L32, L33, L34, L35, L36,           R36, R35, R34, R33, R32, R31, R30, \
              L42, L43, L44,                          R44, R43, R42,                 \
                   L53, L54, L55,           R55, R54, R53,                           \
                        L64, L65,           R65, R64                                 \
) \
{ \
    { L00, L01, L02, L03, L04, L05, L06, KC_NO }, \
    { L10, L11, L12, L13, L14, L15, L16, KC_NO }, \
    { L20, L21, L22, L23, L24, L25, L26, KC_NO }, \
    { L30, L31, L32, L33, L34, L35, L36, KC_NO }, \
    { KC_NO, KC_NO, L42, L43, L44, KC_NO, KC_NO, KC_NO }, \
    { KC_NO, KC_NO, KC_NO, L53, L54, L55, KC_NO, KC_NO }, \
    { KC_NO, KC_NO, KC_NO, KC_NO, L64, L65, KC_NO, KC_NO }, \
    { KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO }, \
    { R00, R01, R02, R03, R04, R05, R06, KC_NO }, \
    { R10, R11, R12, R13, R14, R15, R16, KC_NO }, \
    { R20, R21, R22, R23, R24, R25, R26, KC_NO }, \
    { R30, R31, R32, R33, R34, R35, R36, KC_NO }, \
    { KC_NO, KC_NO, R42, R43, R44, KC_NO, KC_NO, KC_NO }, \
    { KC_NO, KC_NO, KC_NO, R53, R54, R55, KC_NO, KC_NO }, \
    { KC_NO, KC_NO, KC_NO, KC_NO, R64, R65, KC_NO, KC_NO }, \
    { KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO, KC_NO } \
}

---

// keyboards/sabine/rules.mk
MCU = RP2040
BOOTLOADER = rp2040
SPLIT_KEYBOARD = yes
BOOTMAGIC_ENABLE = yes
MOUSEKEY_ENABLE = yes
EXTRAKEY_ENABLE = yes
CONSOLE_ENABLE = no
COMMAND_ENABLE = no
NKRO_ENABLE = yes
BACKLIGHT_ENABLE = no
RGBLIGHT_ENABLE = no
AUDIO_ENABLE = no

---

// keyboards/sabine/keymaps/colemak_dh/keymap.c
#include QMK_KEYBOARD_H

enum layers {
    _BASE,
    _LOWER,
    _RAISE,
    _ADJUST
};

#define LOWER MO(_LOWER)
#define RAISE MO(_RAISE)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [_BASE] = LAYOUT(
        KC_NO,   KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_NO,           KC_NO,   KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_NO,
        KC_NO,   KC_Q,    KC_W,    KC_F,    KC_P,    KC_B,    KC_NO,           KC_NO,   KC_J,    KC_L,    KC_U,    KC_Y,    KC_SCLN, KC_NO,
        KC_NO,   KC_A,    KC_R,    KC_S,    KC_T,    KC_G,    KC_NO,           KC_NO,   KC_M,    KC_N,    KC_E,    KC_I,    KC_O,    KC_NO,
        KC_NO,   KC_X,    KC_C,    KC_D,    KC_V,    KC_Z,    KC_NO,           KC_NO,   KC_K,    KC_H,    KC_COMM, KC_DOT,  KC_SLSH, KC_NO,
                          KC_LBRC, KC_RBRC, KC_NO,                                      KC_NO,   KC_LBRC, KC_RBRC,
                                   KC_NO,   KC_NO,   KC_NO,           KC_NO,   KC_NO,   KC_NO,
                                            KC_NO,   KC_NO,           KC_NO,   KC_NO
    ),

    [_LOWER] = LAYOUT(
        _______, KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   _______,         _______, KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  _______,
        _______, KC_EXLM, KC_AT,   KC_HASH, KC_DLR,  KC_PERC, _______,         _______, KC_CIRC, KC_AMPR, KC_ASTR, KC_LPRN, KC_RPRN, _______,
        _______, KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    _______,         _______, KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    _______,
        _______, _______, _______, _______, _______, _______, _______,         _______, _______, _______, KC_MINS, KC_EQL,  KC_BSLS, _______,
                          _______, _______, _______,                                   _______, _______, _______,
                                   _______, _______, _______,         _______, _______, _______,
                                            _______, _______,         _______, _______
    ),

    [_RAISE] = LAYOUT(
        _______, _______, _______, _______, _______, _______, _______,         _______, _______, _______, _______, _______, _______, _______,
        _______, _______, _______, _______, _______, _______, _______,         _______, _______, _______, KC_UP,   _______, _______, _______,
        _______, _______, _______, _______, _______, _______, _______,         _______, _______, KC_LEFT, KC_DOWN, KC_RGHT, _______, _______,
        _______, _______, _______, _______, _______, _______, _______,         _______, _______, _______, _______, _______, _______, _______,
                          _______, _______, _______,                                   _______, _______, _______,
                                   _______, _______, _______,         _______, _______, _______,
                                            _______, _______,         _______, _______
    ),

    [_ADJUST] = LAYOUT(
        _______, QK_BOOT, _______, _______, _______, _______, _______,         _______, _______, _______, _______, _______, QK_BOOT, _______,
        _______, _______, _______, _______, _______, _______, _______,         _______, _______, _______, _______, _______, _______, _______,
        _______, _______, _______, _______, _______, _______, _______,         _______, _______, _______, _______, _______, _______, _______,
        _______, _______, _______, _______, _______, _______, _______,         _______, _______, _______, _______, _______, _______, _______,
                          _______, _______, _______,                                   _______, _______, _______,
                                   _______, _______, _______,         _______, _______, _______,
                                            _______, _______,         _______, _______
    )
};

layer_state_t layer_state_set_user(layer_state_t state) {
    return update_tri_layer_state(state, _LOWER, _RAISE, _ADJUST);
}
